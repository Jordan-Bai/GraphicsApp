#version 460

uniform vec3 sunDirection;
uniform vec3 sunColour;
uniform vec3 cameraPos;
uniform float specPower;

uniform sampler2D albedoMap; // The base colour texture of the object
uniform sampler2D specularMap; // The specular highlight map of the object
uniform sampler2D normalMap;

in vec3 pos;
in vec3 normal;
in vec3 tangent;
in vec3 biTangent;
in vec2 UVCoord;

out vec4 PixelColour;

void main()
{
	vec3 texAlbedo = texture(albedoMap, UVCoord).rgb;
	vec3 texSpecular = texture(specularMap, UVCoord).rgb;
	vec3 texNormal = texture(normalMap, UVCoord).rgb;
	texNormal = (texNormal * 2) - 1; // Remap to -1 to 1
	
	vec3 t = normalize(tangent);
	vec3 b = normalize(biTangent);
	vec3 n = normalize(normal);
	mat3 TBNmat = mat3(t, b, n);
	vec3 relativeNormal = TBNmat * texNormal;
	
	// Diffuse lighting
	float dLight = -dot(sunDirection, relativeNormal);
	vec3 diffuse = texAlbedo * sunColour * dLight;
	
	// Specular lighting
	vec3 viewDir = normalize(pos - cameraPos); // Vector from camera to pixel pos
	vec3 reflectedRay = reflect(sunDirection, relativeNormal);
	
	float inLine = -dot(viewDir, reflectedRay);
	float sLight = pow( max(0, inLine), specPower);
	vec3 specular = texSpecular * sunColour * sLight;
	
	PixelColour = vec4(diffuse + specular, 1.0);
	//PixelColour = vec4(dLight + sLight, dLight + sLight, dLight + sLight, 1.0);
	//PixelColour = vec4(UVCoord, 0.0, 1.0); // Good for debugging
	//PixelColour = vec4(relativeNormal, 1.0);
}