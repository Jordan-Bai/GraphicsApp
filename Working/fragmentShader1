#version 460

uniform vec3 sunDirection;
uniform vec3 cameraPos;
uniform float specPower;

uniform sampler2D albedoMap; // The base colour texture of the object
uniform sampler2D specularMap; // The specular highlight map of the object

in vec3 pos;
in vec3 normal;
in vec3 tangent;
in vec2 UVCoord;

out vec4 PixelColour;

void main()
{
	vec3 albedoColour = texture(albedoMap, UVCoord).rgb;
	vec3 specularColour = texture(specularMap, UVCoord).rgb;
	
	// Diffuse lighting
	float dLight = -dot(sunDirection, normal);
	vec3 diffuse = albedoColour * dLight;
	
	// Specular lighting
	vec3 viewDir = normalize(pos - cameraPos); // Vector from camera to pixel pos
	vec3 reflectedRay = reflect(sunDirection, normal);
	
	float inLine = -dot(viewDir, reflectedRay);
	float sLight = pow( max(0, inLine), specPower);
	vec3 specular = specularColour * sLight;
	
	PixelColour = vec4(diffuse + specular, 1.0);
	//PixelColour = vec4(UVCoord, 0.0, 1.0); // Good for debugging
}